{"version":3,"sources":["assets/images/svg/head1.svg","roducate/components/OneMsg/OneMsg.js","views/pages/authentication/Login/Login.js","assets/images/svg/login-back.svg","assets/images/svg/login-mid-back.svg","assets/images/svg/head-back.svg","assets/images/svg/login-logo.svg","@core/components/input-password-toggle/index.js"],"names":["OneMsg","props","msg","time","style","_jsxs","className","_objectSpread","zIndex","children","_jsx","ToastContent","_ref","name","role","Fragment","Avatar","size","color","icon","Coffee","Login","_jsx2","_useSkin","useSkin","_useSkin2","_slicedToArray","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","_useState","useState","_useState2","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","isWaiting","setIsWaiting","_useForm","useForm","register","errors","handleSubmit","back","require","default","midBack","headBack","loginLogo","head1","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","res","_res$data","_data","wrap","_context","prev","next","isObjEmpty","useJwt","login","isEmail","sent","status","user","accessToken","token","handleLogin","update","isOnline","push","getHomeRouteForLoggedInUser","toast","success","firstName","lastName","transition","Slide","hideProgressBar","autoClose","error","console","log","t0","message","stop","_x","apply","arguments","Row","Col","lg","sm","background","concat","backgroundRepeat","position","src","top","left","right","bottom","Card","CardBody","md","marginBottom","marginTop","margin","CardTitle","tag","textAlign","CardText","Form","FormGroup","Label","for","Input","autoFocus","type","value","id","onChange","e","target","classnames","innerRef","required","validate","InputPasswordToggle","_defineProperty","CustomInput","label","Link","to","Button","Ripple","onClick","block","Spinner","hideIcon","showIcon","visible","htmlFor","iconSize","placeholder","inputClassName","rest","_objectWithoutProperties","_excluded","inputVisibility","setInputVisibility","InputGroup","InputGroupAddon","addonType","InputGroupText","Eye","EyeOff","renderIcon","defaultProps"],"mappings":"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","file":"static/js/30.c6802481.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/head1.720384fb.svg\";","// ** React Imports\r\nimport PropTypes from 'prop-types'\r\n\r\n// ** Styles\r\nimport './OneMsg.css'\r\n\r\nconst OneMsg = props => {\r\n    // ** Props\r\n    const {\r\n        msg,\r\n        time,\r\n        style\r\n    } = props\r\n\r\n    return (\r\n        <div className=\"frame-5\" style={{zIndex: 1, ...style}}>\r\n            <div className=\"frame-4\">\r\n                <div className=\"text-wrapper-2\">{msg}</div>\r\n            </div>\r\n            <div className=\"description-wrapper\">\r\n                <div className=\"description\">{time}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OneMsg\r\n\r\n// ** PropTypes\r\nOneMsg.propTypes = {\r\n    msg: PropTypes.string,\r\n    time: PropTypes.string\r\n}","import {Fragment, useContext, useState} from 'react'\nimport classnames from 'classnames'\nimport Avatar from '@components/avatar'\nimport {useSkin} from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport {useDispatch} from 'react-redux'\nimport {useForm} from 'react-hook-form'\nimport {Slide, toast} from 'react-toastify'\nimport {handleLogin} from '@store/actions/auth'\nimport {AbilityContext} from '@src/utility/context/Can'\nimport {Link, useHistory} from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport {getHomeRouteForLoggedInUser, isObjEmpty} from '@utils'\nimport {Coffee} from 'react-feather'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardText,\n    CardTitle,\n    Col,\n    CustomInput,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\nimport OneMsg from \"../../../../roducate/components/OneMsg/OneMsg\"\nimport './Login.css'\n\nconst ToastContent = ({name, role}) => (\n    <Fragment>\n        <div className='toastify-header'>\n            <div className='title-wrapper'>\n                <Avatar size='sm' color='success' icon={<Coffee size={12}/>}/>\n                <h6 style={{color: \"white\"}} className='toast-title font-weight-bold'>Welcome, {name}</h6>\n            </div>\n        </div>\n        <div className='toastify-body'>\n            <span style={{color: \"white\"}}>You have successfully logged in as an {role} user to Roducate. Now you can start to explore. Enjoy!</span>\n        </div>\n    </Fragment>\n)\n\nconst Login = props => {\n    const [skin, setSkin] = useSkin()\n    const ability = useContext(AbilityContext)\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [isWaiting, setIsWaiting] = useState(false)\n\n    const {register, errors, handleSubmit} = useForm()\n\n    const back = require(`@src/assets/images/svg/login-back.svg`).default\n    const midBack = require(`@src/assets/images/svg/login-mid-back.svg`).default\n    const headBack = require(`@src/assets/images/svg/head-back.svg`).default\n    const loginLogo = require(`@src/assets/images/svg/login-logo.svg`).default\n    const head1 = require(`@src/assets/images/svg/head1.svg`).default\n\n    const onSubmit = async data => {\n        if (isObjEmpty(errors)) {\n            try {\n                const res = await useJwt.login({email, password, isEmail: true})\n                setIsWaiting(false)\n                if (res?.status === 200) {\n                    const data = {\n                        ...res.data.user,\n                        accessToken: res.data?.token\n                    }\n                    dispatch(handleLogin(data))\n                    ability.update(res.data.user.isOnline)\n                    history.push(getHomeRouteForLoggedInUser(data.role[0]))\n                    toast.success(\n                        <ToastContent name={(data.firstName + data.lastName)} role={data.role[0] || 'admin'}/>,\n                        {transition: Slide, hideProgressBar: true, autoClose: 2000}\n                    )\n                } else {\n                    toast.error(<span style={{color: 'white'}}>{res}</span>, {\n                        transition: Slide,\n                        hideProgressBar: true,\n                        autoClose: 2000\n                    })\n                    console.log(res)\n                }\n            } catch (e) {\n                setIsWaiting(false)\n                toast.error(<span style={{color: 'white'}}>{e.message}</span>, {\n                    transition: Slide,\n                    hideProgressBar: true,\n                    autoClose: 2000\n                })\n            }\n        }\n    }\n\n    return (\n        <div className='auth-wrapper auth-v2'>\n            <Row className='auth-inner m-0'>\n                <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12' style={{\n                    background: `url(${back})`,\n                    backgroundRepeat: 'repeat'\n                }}>\n                    <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n                        <div style={{background: `url(${headBack})`, position: \"relative\"}}>\n                            <img src={midBack} style={{position: \"absolute\", top: 0, left: 0}}/>\n                            <OneMsg msg=\"Yeah, There’s School\" time=\"4mins ago\"\n                                    style={{position: \"absolute\", top: '20%', left: '-35%'}}/>\n                            <OneMsg msg=\"Parental support 🤶🏾\" time=\"4mins ago\"\n                                    style={{position: \"absolute\", top: '-18%', right: 0}}/>\n                            <OneMsg msg=\"Teachers are not left behind\" time=\"4mins ago\"\n                                    style={{position: \"absolute\", bottom: '8%', left: '-30%'}}/>\n                            <OneMsg msg=\"Counsellors are here too 💁🏾\" time=\"4mins ago\"\n                                    style={{position: \"absolute\", bottom: 0, right: '-15%'}}/>\n                            <img src={head1} style={{position: \"relative\"}}/>\n                        </div>\n                    </div>\n                </Col>\n                <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n                    <Card className=\"mediaMinWidth\">\n                        <CardBody>\n                            <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n                                <div className='d-flex align-items-center' style={{marginBottom: 30, marginTop: 40}}>\n                                    <img style={{margin: 'auto'}} src={loginLogo}/>\n                                </div>\n                                <CardTitle tag='h2' className='font-weight-bold mb-1' style={{textAlign: 'center'}}>\n                                    Hi, Welcome\n                                </CardTitle>\n                                <CardText className='mb-2'>Please sign-in to your account and start your\n                                    experience</CardText>\n                                <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n                                    <FormGroup>\n                                        <Label className='form-label' for='login-email'>\n                                            Email\n                                        </Label>\n                                        <Input\n                                            autoFocus\n                                            type='email'\n                                            value={email}\n                                            id='login-email'\n                                            name='login-email'\n                                            onChange={e => setEmail(e.target.value)}\n                                            className={classnames({'is-invalid': errors['login-email']})}\n                                            innerRef={register({required: true, validate: value => value !== ''})}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <div className='d-flex justify-content-between'>\n                                            <Label className='form-label' for='login-password'>\n                                                Password\n                                            </Label>\n                                        </div>\n                                        <InputPasswordToggle\n                                            value={password}\n                                            id='login-password'\n                                            name='login-password'\n                                            className='input-group-merge'\n                                            onChange={e => setPassword(e.target.value)}\n                                            className={classnames({'is-invalid': errors['login-password']})}\n                                            innerRef={register({required: true, validate: value => value !== ''})}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <div className='d-flex justify-content-between'>\n                                            <CustomInput type='checkbox' className='custom-control-Primary'\n                                                         id='remember-me'\n                                                         label='Remember Me'/>\n                                            <Link to='/forgot-password'>\n                                                <small>Forgot Password?</small>\n                                            </Link>\n                                        </div>\n                                    </FormGroup>\n                                    <Button.Ripple style={{marginBottom: 20}} type='submit' onClick={() => {\n                                        setIsWaiting(true)\n                                    }} color='primary' block>\n                                        {isWaiting && <Spinner className=\"mr-1\" color='white' size='sm'/>}Login\n                                    </Button.Ripple>\n                                </Form>\n                            </Col>\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default Login\n","export default __webpack_public_path__ + \"static/media/login-back.1a7b69a7.svg\";","export default __webpack_public_path__ + \"static/media/login-mid-back.2425eede.svg\";","export default __webpack_public_path__ + \"static/media/head-back.c791047a.svg\";","export default __webpack_public_path__ + \"static/media/login-logo.852a6be6.svg\";","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}